// асинхронный echo клиент
#include <iostream>
#include <boost/asio.hpp>
#include <boost/array.hpp>
#include <boost/bind.hpp>
#include <string>

using boost::asio::ip::tcp;

class client
{
public:
	client(boost::asio::io_service& io)
		: socket_(io), msg("Hello, sweetie")
	{
		start_connect();
	}
private:
	void start_connect()
	{
		socket_.async_connect(tcp::endpoint(boost::asio::ip::address::from_string("127.0.0.1"), 13), 
			boost::bind(&client::handle_connect, this, boost::asio::placeholders::error));
	}

	void handle_connect(const boost::system::error_code& e)
	{
		if (!e)
		{
			socket_.async_write_some(boost::asio::buffer(msg), 
				boost::bind(&client::handle_write, this,
				boost::asio::placeholders::error, boost::asio::placeholders::bytes_transferred));
		}
	}

	void handle_write(const boost::system::error_code& e, std::size_t len)
	{
		if (!e)
		{
			socket_.async_read_some(boost::asio::buffer(buf),
				boost::bind(&client::handle_read, this,
				boost::asio::placeholders::error, boost::asio::placeholders::bytes_transferred));
		}
	}

	void handle_read(const boost::system::error_code& e, std::size_t len)
	{
		if (!e)
		{
			std::cout << buf.data() << std::endl;
		}
	}

	tcp::socket socket_;
	boost::array<char, 128> buf;
	std::string msg;
};

int main()
{
	try
	{
		boost::asio::io_service io_service;
		client the_client(io_service);
		io_service.run();
	}

	catch (const std::exception& e)
	{
		std::cerr << e.what() << std::endl;
	}

	return 0;
}
