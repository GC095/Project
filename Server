// Cервер
#include <iostream>
#include <boost/asio.hpp>
#include <boost/bind.hpp>
#include <boost/enable_shared_from_this.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/array.hpp>
#include <string>

using boost::asio::ip::tcp;

class session
	: public boost::enable_shared_from_this<session>
{
public:
	typedef boost::shared_ptr<session> pointer;

	static pointer create(boost::asio::io_service& io)
	{
		return pointer(new session(io));
	}

	void start()
	{
		socket_.async_read_some(boost::asio::buffer(rcv_data), 
			boost::bind(&session::handle_read, shared_from_this(), 
			boost::asio::placeholders::error, boost::asio::placeholders::bytes_transferred));
	}

	tcp::socket& socket()
	{
		return socket_;
	}

private:
	session(boost::asio::io_service& io)
		: socket_(io), tmp_msg("some_file_data")
	{}

	void handle_read(const boost::system::error_code& e, std::size_t len)
	{
		if (!e)
		{
			std::cout << "Got this from client: " << rcv_data.data() << std::endl;

			// как временное решение для проверки
			if (!std::string(rcv_data.data()).compare("write")) // хотим сохранить файл на сервере
				do_write();
			else if (!std::string(rcv_data.data()).compare("read")) // хотим скачать файл с сервера
				do_read();
		}
	}

	void handle_write(const boost::system::error_code& e, std::size_t len)
	{
		std::cout << "You file has been sent to you" << std::endl;
	}

	void do_read() // передаём файл с сервера клиенту
	{
		// делаем проверку, заполняем структуру

		socket_.async_write_some(boost::asio::buffer(tmp_msg),
			boost::bind(&session::handle_write, shared_from_this(),
			boost::asio::placeholders::error, boost::asio::placeholders::bytes_transferred));
	}

	void do_write() // сохраняем файл на сервере
	{
		// делаем проверку, сохраняем
		std::cout << "You file has been successfully saved" << std::endl;
	}

	tcp::socket socket_;
	boost::array<char, 128> rcv_data;
	std::string tmp_msg;
};

class server
{
public:
	server(boost::asio::io_service& io)
		: acceptor_(io, tcp::endpoint(tcp::v4(), 13)) 
	{
		start_accept();
	}
	
private:
	void start_accept()
	{
		session::pointer new_session = session::create(acceptor_.get_io_service());

		acceptor_.async_accept(new_session->socket(), 
			boost::bind(&server::handle_accept, this, new_session, boost::asio::placeholders::error));
	}

	void handle_accept(session::pointer new_session, const boost::system::error_code& e)
	{
		if (!e)
		{
			new_session->start();
		}

		start_accept();
	}

	tcp::acceptor acceptor_;
};

int main()
{
	try
	{
		boost::asio::io_service io_service;
		server the_server(io_service);
		io_service.run();
	}
	
	catch (const std::exception& e)
	{
		std::cerr << e.what() << std::endl;
	}

	return 0;
}
